import XCTest

extension GrammarRuleTests {
    static let __allTests = [
        ("testGramarRuleLookahead", testGramarRuleLookahead),
        ("testGramarRuleLookaheadWithKeyword", testGramarRuleLookaheadWithKeyword),
        ("testGramarRuleOrStopsAtFirstMatchFound", testGramarRuleOrStopsAtFirstMatchFound),
        ("testGrammarNamedRule", testGrammarNamedRule),
        ("testGrammarRecursive", testGrammarRecursive),
        ("testGrammarRuleArrayWithOneItemBecomesOptional", testGrammarRuleArrayWithOneItemBecomesOptional),
        ("testGrammarRuleChar", testGrammarRuleChar),
        ("testGrammarRuleComplexNonRecursive", testGrammarRuleComplexNonRecursive),
        ("testGrammarRuleComplexRecursive", testGrammarRuleComplexRecursive),
        ("testGrammarRuleComplexRecursiveWithLookaheadWithKeyword", testGrammarRuleComplexRecursiveWithLookaheadWithKeyword),
        ("testGrammarRuleDigit", testGrammarRuleDigit),
        ("testGrammarRuleDirectSequence", testGrammarRuleDirectSequence),
        ("testGrammarRuleKeyword", testGrammarRuleKeyword),
        ("testGrammarRuleLetter", testGrammarRuleLetter),
        ("testGrammarRuleMaximumLengthIn", testGrammarRuleMaximumLengthIn),
        ("testGrammarRuleMaximumLengthInWithGreedyRule", testGrammarRuleMaximumLengthInWithGreedyRule),
        ("testGrammarRuleMaximumLengthInWithZeroOrMoreRule", testGrammarRuleMaximumLengthInWithZeroOrMoreRule),
        ("testGrammarRuleOneOrMore", testGrammarRuleOneOrMore),
        ("testGrammarRuleOneOrMoreOr", testGrammarRuleOneOrMoreOr),
        ("testGrammarRuleOperatorDirectSequence", testGrammarRuleOperatorDirectSequence),
        ("testGrammarRuleOperatorDirectSequenceCollapseSequential", testGrammarRuleOperatorDirectSequenceCollapseSequential),
        ("testGrammarRuleOperatorOneOrMore", testGrammarRuleOperatorOneOrMore),
        ("testGrammarRuleOperatorOneOrMoreOnArray", testGrammarRuleOperatorOneOrMoreOnArray),
        ("testGrammarRuleOperatorOr", testGrammarRuleOperatorOr),
        ("testGrammarRuleOperatorOrCollapseSequential", testGrammarRuleOperatorOrCollapseSequential),
        ("testGrammarRuleOperatorSequence", testGrammarRuleOperatorSequence),
        ("testGrammarRuleOperatorSequenceCollapseSequential", testGrammarRuleOperatorSequenceCollapseSequential),
        ("testGrammarRuleOperatorZeroOrMore", testGrammarRuleOperatorZeroOrMore),
        ("testGrammarRuleOperatorZeroOrMoreOnArray", testGrammarRuleOperatorZeroOrMoreOnArray),
        ("testGrammarRuleOptional", testGrammarRuleOptional),
        ("testGrammarRuleOptionalRuleDescriptionWithMany", testGrammarRuleOptionalRuleDescriptionWithMany),
        ("testGrammarRuleOr", testGrammarRuleOr),
        ("testGrammarRulePassesIn", testGrammarRulePassesIn),
        ("testGrammarRulePassesInWithZeroOrMoreRule", testGrammarRulePassesInWithZeroOrMoreRule),
        ("testGrammarRulePerformance", testGrammarRulePerformance),
        ("testGrammarRuleRecursiveWithOptionalPerformance", testGrammarRuleRecursiveWithOptionalPerformance),
        ("testGrammarRuleRecursiveWithZeroOrMorePerformance", testGrammarRuleRecursiveWithZeroOrMorePerformance),
        ("testGrammarRuleSequence", testGrammarRuleSequence),
        ("testGrammarRuleWhitespace", testGrammarRuleWhitespace),
        ("testGrammarRuleZeroOrMore", testGrammarRuleZeroOrMore),
        ("testManualLexingPerformance", testManualLexingPerformance),
        ("testRecursiveGrammarRuleCreate", testRecursiveGrammarRuleCreate),
        ("testRecursiveGrammarRuleDescription", testRecursiveGrammarRuleDescription),
    ]
}

extension LexerTests {
    static let __allTests = [
        ("testBacktracker", testBacktracker),
        ("testBacktrackerWorksMultipleTimesInSequence", testBacktrackerWorksMultipleTimesInSequence),
        ("testFindNext", testFindNext),
        ("testInitState", testInitState),
        ("testIsEof", testIsEof),
        ("testNext", testNext),
        ("testNextThrowsWhenAtEndOfString", testNextThrowsWhenAtEndOfString),
        ("testNextUsesOffsetForReading", testNextUsesOffsetForReading),
        ("testPeek", testPeek),
        ("testPeekForward", testPeekForward),
        ("testPeekForwardFailsWithErrorWhenPastEndOfString", testPeekForwardFailsWithErrorWhenPastEndOfString),
        ("testPeekThrowsErrorWhenEndOfString", testPeekThrowsErrorWhenEndOfString),
        ("testPeekUsesOffsetForPeeking", testPeekUsesOffsetForPeeking),
        ("testRangeMarker", testRangeMarker),
        ("testRangeMarkerEmpty", testRangeMarkerEmpty),
        ("testRangeMarkerReverseIndex", testRangeMarkerReverseIndex),
        ("testRewindToStart", testRewindToStart),
        ("testSafeIsNextChar", testSafeIsNextChar),
        ("testSafeIsNextCharWithOffset", testSafeIsNextCharWithOffset),
        ("testSkipToNext", testSkipToNext),
        ("testSkipToNextFailsIfNotFound", testSkipToNextFailsIfNotFound),
        ("testWithTemporaryIndex", testWithTemporaryIndex),
        ("testWithTemporaryIndexRewindsOnError", testWithTemporaryIndexRewindsOnError),
    ]
}

extension Lexer_AdvanceTests {
    static let __allTests = [
        ("testAdvance", testAdvance),
        ("testAdvanceExpectingCurrent", testAdvanceExpectingCurrent),
        ("testAdvanceExpectingCurrentThrowsWhenAtEndOfString", testAdvanceExpectingCurrentThrowsWhenAtEndOfString),
        ("testAdvanceExpectingCurrentThrowsWhenNonMatching", testAdvanceExpectingCurrentThrowsWhenNonMatching),
        ("testAdvanceExpectingDoesNotAdvanceLexerIndexOnError", testAdvanceExpectingDoesNotAdvanceLexerIndexOnError),
        ("testAdvanceIf", testAdvanceIf),
        ("testAdvanceIfOptions", testAdvanceIfOptions),
        ("testAdvanceIfUsesOffset", testAdvanceIfUsesOffset),
        ("testAdvanceLengthAdvancingToEndOfString", testAdvanceLengthAdvancingToEndOfString),
        ("testAdvanceLength", testAdvanceLength),
        ("testAdvanceLengthThrowsErrorWhenPastEndOfString", testAdvanceLengthThrowsErrorWhenPastEndOfString),
        ("testAdvanceThrowsErrorWhenAtEndOfString", testAdvanceThrowsErrorWhenAtEndOfString),
        ("testAdvanceUntil", testAdvanceUntil),
        ("testAdvanceUntilRespectsEndOfString", testAdvanceUntilRespectsEndOfString),
        ("testAdvanceValidatingCurrent", testAdvanceValidatingCurrent),
        ("testAdvanceValidatingCurrentThrowsWhenAtEndOfString", testAdvanceValidatingCurrentThrowsWhenAtEndOfString),
        ("testAdvanceValidatingCurrentThrowsWhenNonMatching", testAdvanceValidatingCurrentThrowsWhenNonMatching),
        ("testAdvanceValidatingDoesNotAdvanceLexerIndexOnError", testAdvanceValidatingDoesNotAdvanceLexerIndexOnError),
        ("testAdvanceWhile", testAdvanceWhile),
        ("testAdvanceWhileRespectsEndOfString", testAdvanceWhileRespectsEndOfString),
        ("testAdvanceWithLengthEndingInEndIndex", testAdvanceWithLengthEndingInEndIndex),
        ("testCheckNext", testCheckNext),
        ("testCheckNextOptions", testCheckNextOptions),
        ("testCheckNextUsesOffset", testCheckNextUsesOffset),
        ("testExpect", testExpect),
        ("testExpectThrowsErrorWhenNonMatching", testExpectThrowsErrorWhenNonMatching),
        ("testNonMatchingAdvanceIf", testNonMatchingAdvanceIf),
        ("testNonMatchingCheckNext", testNonMatchingCheckNext),
        ("testSafeAdvance", testSafeAdvance),
        ("testSafeAdvanceStopsAtEndOfString", testSafeAdvanceStopsAtEndOfString),
    ]
}

extension Lexer_ConsumeTests {
    static let __allTests = [
        ("testConsumeLength", testConsumeLength),
        ("testConsumeLengthOffsetFromStart", testConsumeLengthOffsetFromStart),
        ("testConsumeLengthThrowsEndOfStringErrorIfLengthExceedsStringEndIndex", testConsumeLengthThrowsEndOfStringErrorIfLengthExceedsStringEndIndex),
        ("testConsumeString", testConsumeString),
        ("testConsumeUntil", testConsumeUntil),
        ("testConsumeUntilRespectsEndOfString", testConsumeUntilRespectsEndOfString),
        ("testConsumeWhile", testConsumeWhile),
        ("testConsumeWhileRespectsEndOfString", testConsumeWhileRespectsEndOfString),
        ("testConsumeWithLengthEndingInEndIndex", testConsumeWithLengthEndingInEndIndex),
    ]
}

extension TokenizerTests {
    static let __allTests = [
        ("testAdvanceMatching", testAdvanceMatching),
        ("testAdvanceMatchingFailed", testAdvanceMatchingFailed),
        ("testAdvanceOver", testAdvanceOver),
        ("testAdvanceOverErrorMessage", testAdvanceOverErrorMessage),
        ("testAdvanceOverFailed", testAdvanceOverFailed),
        ("testAdvanceOverTokenType", testAdvanceOverTokenType),
        ("testAdvanceOverTokenTypeErrorMessage", testAdvanceOverTokenTypeErrorMessage),
        ("testAdvanceOverTokenTypeFailed", testAdvanceOverTokenTypeFailed),
        ("testAdvancesUntilStopsAtEndOfFile", testAdvancesUntilStopsAtEndOfFile),
        ("testAdvanceUntil", testAdvanceUntil),
        ("testAllTokens", testAllTokens),
        ("testAllTokensSpaced", testAllTokensSpaced),
        ("testAlternativeTokenizer", testAlternativeTokenizer),
        ("testBacktracker", testBacktracker),
        ("testBacktrackerWontEraseHasReadFirstTokenState", testBacktrackerWontEraseHasReadFirstTokenState),
        ("testBacktrackerWontWorkTwice", testBacktrackerWontWorkTwice),
        ("testBacktracking", testBacktracking),
        ("testBacktrackingWorksWithErrorsThrown", testBacktrackingWorksWithErrorsThrown),
        ("testConsumeTokenIfTypeIsMatching", testConsumeTokenIfTypeIsMatching),
        ("testConsumeTokenIfTypeIsNonMatching", testConsumeTokenIfTypeIsNonMatching),
        ("testFullToken", testFullToken),
        ("testFullTokenRange", testFullTokenRange),
        ("testFullTokenTokenString", testFullTokenTokenString),
        ("testFullTokenValue", testFullTokenValue),
        ("testInitWithLexer", testInitWithLexer),
        ("testMakeIterator", testMakeIterator),
        ("testSkipToken", testSkipToken),
        ("testSkipTokenWithLeadingWhitespace", testSkipTokenWithLeadingWhitespace),
        ("testToken", testToken),
        ("testTokenIsType", testTokenIsType),
        ("testTokenizeEofOnEmptyString", testTokenizeEofOnEmptyString),
        ("testTokenizerConsistencyWhenLexerIndexIsModifiedExternally", testTokenizerConsistencyWhenLexerIndexIsModifiedExternally),
        ("testTokenizeStream", testTokenizeStream),
        ("testTokenMatches", testTokenMatches),
        ("testTokenMatchesWithEmptyString", testTokenMatchesWithEmptyString),
        ("testTokenTypeIsType", testTokenTypeIsType),
        ("testTokenTypeMatches", testTokenTypeMatches),
    ]
}

#if !os(macOS)
public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(GrammarRuleTests.__allTests),
        testCase(LexerTests.__allTests),
        testCase(Lexer_AdvanceTests.__allTests),
        testCase(Lexer_ConsumeTests.__allTests),
        testCase(TokenizerTests.__allTests),
    ]
}
#endif
